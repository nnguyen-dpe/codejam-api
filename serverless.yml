# serverless.yml

service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local
  - serverless-offline

custom:
  # tableName: 'developers-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  # dynamodb:
  #   start:
  #     migrate: true

package:
  exclude:
    - node_modules/**
    - venv/**

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: ap-southeast-2
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource:
  #       - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  # environment:
  #   USERS_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: wsgi.handler
    events:
      - http: ANY /api
      - http: 'ANY {proxy+}'
  getDeveloper:
    handler: wsgi.handler
    events:
      - http: 'GET /api/v1/developers/{proxy+}'
  createDeveloper:
    handler: wsgi.handler
    events:
      - http: 'POST /api/v1/developers'
  getDevelopers:
    handler: wsgi.handler
    events:
      - http: 'GET /api/v1/developers'

# resources:
#   Resources:
#     UsersDynamoDBTable:
#       Type: 'AWS::DynamoDB::Table'
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: user_id
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: user_id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:custom.tableName}